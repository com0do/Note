
gcc `pkg-config -cflags -libs glib-2.0 gobject-2.0 gthread-2.0 gmodule-2.0` hello.c  -o hello


GValue a = G_VALUE_INIT;
g_type_init();
g_value_init(&a,G_TYPE_STRING);
g_assert(G_VALUE_HOLDS_STRING(&a));
g_value_set_static_string(&a,"lsdkfjwe");
g_print("%d\n",g_value_get_string(&a));
g_value_unset(&a);


G_DEFINE_TYPE(SimpleObject,simple_object,G_TYPE_OBJECT);

the only pieces which have to be manually provided are 
	the definitions of the instance and class structure
	the definitions of the instance and class init functions .
	

#define _G_DEFINE_TYPE_EXTENDED_BEGIN(TypeName, type_name, TYPE_PARENT, flags) \
\
static void     type_name##_init              (TypeName        *self); \
static void     type_name##_class_init        (TypeName##Class *klass); \
static gpointer type_name##_parent_class = NULL; \
static void     type_name##_class_intern_init (gpointer klass) \
{ \
  type_name##_parent_class = g_type_class_peek_parent (klass); \
  type_name##_class_init ((TypeName##Class*) klass); \
} \
\
GType \
type_name##_get_type (void) \
{ \
  static volatile gsize g_define_type_id__volatile = 0; \
  if (g_once_init_enter (&g_define_type_id__volatile))  \
    { \
      GType g_define_type_id = \
        g_type_register_static_simple (TYPE_PARENT, \
                                       g_intern_static_string (#TypeName), \
                                       sizeof (TypeName##Class), \
                                       (GClassInitFunc) type_name##_class_intern_init, \
                                       sizeof (TypeName), \
                                       (GInstanceInitFunc) type_name##_init, \
                                       (GTypeFlags) flags); \
      { /* custom code follows */

	
	
	
g_object_class_install_property()


typedef struct {
	char* scheme;
	char* host,*userinfo;
	unsigned unt port ;
	char* path,*query,*fragment;
}ne_uri;

GLib组成部分
	基础类型
	对核心应用的支持
	使用功能
	数据类型
	对象系统

对核心应用的支持包括
	事件循环
	内存操作
	线程操作
	动态链接库操作
	出错处理
	日志
	
参考gmacros.h，写的非常好，
// G_LIKELY(expr)
 int a =   ({
        int _g_boolean_var_;
        if (1)
            _g_boolean_var_ = 1234;
        else
            _g_boolean_var_ = 0;
        _g_boolean_var_;
    });

    if(__builtin_expect(123,1)){
        g_print("dkfjekfas:%d\n",a);
    }
	
